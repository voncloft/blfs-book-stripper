#!/bin/bash

# Check for input (package name)
if [ -z "$1" ]; then
    echo "Usage: $0 <package_name>"
    echo "Example: $0 shadow"
    exit 1
fi

PACKAGE_NAME="$1"
BASE_URL="https://www.linuxfromscratch.org/blfs/view/svn"
OUTPUT_FILE="$PWD/spkgbuild"
TEMP_FILE=$(mktemp)
DEBUG_LOG="/var/cache/scratchpkg/logs/spkgbuild_debug.log"
mkdir -p "$(dirname "$DEBUG_LOG")"
echo "Debug log for package $PACKAGE_NAME - $(date)" > "$DEBUG_LOG"

get_url() {
    local pkg="$1"
    local sections=("basicnet" "general" "gnome" "kde" "lxqt" "multimedia" "postlfs" "pst" "server" "x" "xfce" "xsoft")
    for section in "${sections[@]}"; do
        local url="$BASE_URL/$section/$pkg.html"
        if curl -s -I "$url" | grep -q "200 OK"; then
            echo "$url"
	    echo "$pkg succeeded" >> /var/cache/scratchpkg/logs/booklog.txt
            return 0
 
        fi
    done
    echo "Error: Could not find package '$pkg' in BLFS SVN branch" | tee -a "$DEBUG_LOG"
    rm "$TEMP_FILE"
    exit 1
}
#get_url() {
#    local pkg="$1"
#    local sections=("basicnet" "general" "gnome" "kde" "lxqt" "multimedia" "postlfs" "pst" "server" "x" "xfce" "xsoft")
#    local max_attempts=3

#    for section in "${sections[@]}"; do
#        local url="$BASE_URL/$section/$pkg.html"
#        
#        local attempt=1
#        while [ $attempt -le $max_attempts ]; do
#            if curl -s -I "$url" | grep -q "200 OK"; then
#                echo "$url"
#                echo "$pkg succeeded" >> /var/cache/scratchpkg/logs/booklog.txt
#                return 0
#            else
#                echo "Attempt $attempt failed for $url"
#                #echo "$pkg failed in section $section" >> /var/cache/scratchpkg/logs/booklog.txt
#                ((attempt++))
#                sleep 1
#            fi
#        done

#    done

#    echo "Error: Could not find package '$pkg' in BLFS SVN branch" | tee -a "$DEBUG_LOG"
    #echo "$pkg not found in book" >> var/cache/scratchpkg/logs/booklog.txt
#    rm "$TEMP_FILE"
#    exit 1
#}

PAGE_URL=$(get_url "$PACKAGE_NAME")
echo "Found URL: $PAGE_URL" >> "$DEBUG_LOG"

extract_package_info() {
    local page_url="$1"
    local output_file="$2"

    if ! curl -s "$page_url" > "$TEMP_FILE"; then
        echo "Error: Failed to fetch page $page_url" | tee -a "$DEBUG_LOG"
        rm "$TEMP_FILE"
        exit 1
    fi

    PACKAGE_INFO=$(xmllint --html --recover --xpath '//title/text()' "$TEMP_FILE" 2>/dev/null | sed -e 's/ - BLFS.*//' | tr -d '\n')
    echo "PACKAGE_INFO: $PACKAGE_INFO" >> "$DEBUG_LOG"

    VERSION=$(echo "$PACKAGE_INFO" | sed -n 's/.*-\([0-9][0-9.]*[0-9]\)/\1/p')
    #NAME=$(echo "$PACKAGE_INFO" | sed -e "s/-$VERSION$//" | tr '[:upper:]' '[:lower:]')
    NAME=$(echo "$PACKAGE_INFO" | sed -e "s/-$VERSION$//" | tr '[:upper:]' '[:lower:]' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

    echo "NAME: $NAME" >> "$DEBUG_LOG"
    echo "VERSION: $VERSION" >> "$DEBUG_LOG"

    DESCRIPTION=$(xmllint --html --recover --xpath 'string((//div[@class="package"]/p)[1])' "$TEMP_FILE" 2>/dev/null | \
        sed -e 's/^[ \t]*//;s/[ \t]*$//' -e 's/"/\\"/g' | tr '\n' ' ' | sed -e 's/  */ /g')
    DESCRIPTION=$(echo "$DESCRIPTION" | awk -F'[.!?]' '{print $1}' | sed -e 's/^[ \t]*//;s/[ \t]*$//')
    [ -z "$DESCRIPTION" ] && DESCRIPTION="No description available"
    echo "DESCRIPTION: $DESCRIPTION" >> "$DEBUG_LOG"

    DEPENDENCIES=$(xmllint --html --recover --xpath '//p[@class="required"]/a/text() | //p[@class="recommended"]/a/@title' "$TEMP_FILE" 2>/dev/null | \
        sed -E 's/title="([^"]+)"/\1/' | \
        sed -E 's/-[0-9][0-9.]*[0-9]//' | \
        tr '\n' ' ' | \
        sed -e 's/  */ /g' -e 's/^ *//;s/ *$//' -e 's/,//g' -e 's/ and / /g' | \
        tr '[:upper:]' '[:lower:]')
    [ -z "$DEPENDENCIES" ] && DEPENDENCIES="none"
    echo "DEPENDENCIES: $DEPENDENCIES" >> "$DEBUG_LOG"

    SOURCE_URLS=$(xmllint --html --recover --xpath '//a[@class="ulink" and (contains(@href, ".tar.") or contains(@href, ".patch"))]/@href' "$TEMP_FILE" 2>/dev/null | \
        sed -e 's/href="//' -e 's/"$//')

    if [ -n "$SOURCE_URLS" ]; then
        # Format source="url1\nurl2" with no empty lines or extra spaces
        SOURCE_FIELD="source=\"$(echo "$SOURCE_URLS" | tr ' ' '\n' | sed '/^$/d')\""
    else
        SOURCE_FIELD='source=""'
    fi
    echo "SOURCE_FIELD: $SOURCE_FIELD" >> "$DEBUG_LOG"

    BUILD_INSTRUCTIONS=$(xmllint --html --recover --xpath '//pre[@class="userinput"]/kbd[@class="command"]/text()' "$TEMP_FILE" 2>/dev/null)
    EOF_COMMANDS=$(xmllint --html --recover --xpath '//pre[@class="root"]/kbd[@class="command"]/node()' "$TEMP_FILE" 2>/dev/null | \
        perl -0777 -pe 's/<code class="literal">(.+?)<\/code>/\1/sg' | \
        perl -0777 -pe 's/.*?<kbd class="command">(.+?)<\/kbd>.*/\1/sg')
    if [ -z "$EOF_COMMANDS" ]; then
        EOF_COMMANDS=$(xmllint --html --recover --xpath 'string(//pre[@class="root"])' "$TEMP_FILE" 2>/dev/null)
    fi

    PATCH_COMMAND=""
    if echo "$SOURCE_URLS" | grep -q ".patch"; then
        PATCH_COMMAND="[ -f *.patch ] && patch -p1 < *.patch"
    fi

    ALL_COMMANDS=$(printf "%s\n%s" "$BUILD_INSTRUCTIONS" "$EOF_COMMANDS")
    if [ -n "$PATCH_COMMAND" ]; then
        ALL_COMMANDS=$(printf "%s\n%s" "$PATCH_COMMAND" "$ALL_COMMANDS")
    fi

    BUILD_COMMANDS=$(echo "$ALL_COMMANDS" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//' | grep -v '^$' | sed -e 's/&&$//' -e 's/&& */&& \\\n        /g')

    cat << EOF > "$output_file"
# description   : $DESCRIPTION
# depends       : $DEPENDENCIES

name=$NAME
version=$VERSION
release=1
$SOURCE_FIELD

options="!checksum"

build() {
        cd \$name-\$version
        $BUILD_COMMANDS
}
EOF

    echo "spkgbuild generated in $output_file" >> "$DEBUG_LOG"
}

extract_package_info "$PAGE_URL" "$OUTPUT_FILE"

rm "$TEMP_FILE"
sed -Ei 's/^make(\s+)/make DESTDIR=\$PKG\1/' spkgbuild
sed -Ei 's/^ninja(\s+)/DESTDIR=\$PKG ninja\1/' spkgbuild
sed -Ei 's/&amp;//g' spkgbuild
sed -Ei 's/&gt;/>/g' spkgbuild
sed -Ei 's/&lt;/</g' spkgbuild
echo "spkgbuild file generated: $OUTPUT_FILE"
echo "Debug log saved to: $DEBUG_LOG"
